*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    background: linear-gradient(to right bottom, hsl(185, 64%, 86%), hsl(186, 35%, 61%), hsl(186, 39%, 40%));
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.img-container span img{
    /* outline: 3px solid tomato; */
    width: 80%;
    height: 80%;
    position: absolute;
    top: 0;
    left: 0;
    border-radius: 100px;

    object-fit: cover;      
    /* object-fit:  內容應如何調整大小以適合其容器
    cover  替換內容的大小會在填充元素的整個內容框時保持其縱橫比。
    如果對象的縱橫比與其框的縱橫比不匹配，則對象將被裁剪以適合。 */

    transition: 2s;
    /* 轉換使您能夠定義元素的兩個狀態之間的轉換。
    可以使用偽類定義不同的狀態，例如:hover或:active或使用 JavaScript 動態設置。 */
}

.img-container{
    /* outline: 3px solid tomato; */
    position: relative;
    width: 300px;
    height: 300px;
    transform-style: preserve-3d;   /* 指示元素的子元素應定位在 3D 空間中。 */
    /* outline: 1px solid red; */
    animation: rotate 30s linear infinite;      
    /* infinite : 反覆次數(無限)  linear : 動畫曲線(速率一致就對了) */
}

@keyframes rotate{
    0%{
        transform: perspective(1000px) rotateY(0deg);   /* perspective屬性用於為 3D 定位元素提供一些視角 */
    }

    100%{
        transform: perspective(1000px) rotateY(360deg);
    }
}

.img-container span{
    /* outline: 3px solid tomato; */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform-origin: center;   /* 設置元素轉換的原點 */
    /* transform-style: preserve-3d;*/
    transform: rotateY(calc(var(--i)*45deg)) translateZ(350px); 
    /* calc 是作為函式使用
    translateZ  在3D空間中沿 z 軸重新定位元素 */
}

.img-container span:hover img{
    transform: translateY(-50px) scale(1.2);
    cursor: pointer;
}



